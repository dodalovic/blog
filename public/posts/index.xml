<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dusan Odalovic</title>
        <link>https://dodalovic.github.io/posts/</link>
        <description>Recent content in Posts on Dusan Odalovic</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 30 Jul 2017 13:35:00 +0100</lastBuildDate>
        <atom:link href="https://dodalovic.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Zero boilerplate implementing state pattern in kotlin</title>
            <link>https://dodalovic.github.io/posts/2017/07/zero-boilerplate-implementing-state-pattern-in-kotlin/</link>
            <pubDate>Sun, 30 Jul 2017 13:35:00 +0100</pubDate>
            
            <guid>https://dodalovic.github.io/posts/2017/07/zero-boilerplate-implementing-state-pattern-in-kotlin/</guid>
            <description>State pattern is a pretty nice solution for solving problems related to changing behavior of some component(class) at runtime, which varies depending on current state of that object. Clients of our class having dynamic behavior have an impression that, upon interaction with that class, it seems like there’s different implementation of that object as of that interaction. There’s no magic involved – we’re just using composition, and our dynamic object just delegates call to State object it encapsulates.</description>
            <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/State_pattern" target="_blank"><em>State pattern</em></a> is a pretty nice solution for solving
 problems related to changing behavior of some component(class) at runtime, which varies depending on
  current state of that object. Clients of our class having dynamic behavior have an impression that,
  upon interaction with that class, it seems like there’s different implementation of that object as of
  that interaction. There’s no magic involved – we’re just using composition, and our dynamic object just
  delegates call to <code>State</code> object it encapsulates. Interface of <code>State</code> object defines set of actions
  (methods) that change behavior of our wrapping class (set of actions that cause system to transition).
  <code>State</code> implementations are those that are in charge of making transitions from state to state.</p>

<p>Here’s an example of coffee machine, that acts differently based on state it’s currently in.
Here, <code>CoffeeMachine</code> is our dynamic class, and it encapsulates instance of our <code>CoffeeMachineState</code> interface.
We initially set <code>Off</code> implementation of <code>State</code> when starting our coffee machine. Then, our implementations
transition the state, based on different actions being performed.</p>

<pre><code class="language-kotlin">
package patterns.state

class CoffeeMachine {
    var state: CoffeeMachineState
    val MAX_BEANS_QUANTITY = 100
    val MAX_WATER_QUANTITY = 100
    var beansQuantity = 0
    var waterQuantity = 0
    val offState = Off(this)
    val noIngredients = NoIngredients(this)
    val ready = Ready(this)

    init {
        state = offState
    }

    fun turnOn() = state.turnOn()
    fun fillInBeans(quantity: Int) = state.fillInBeans(quantity)
    fun fillInWater(quantity: Int) = state.fillInWater(quantity)
    fun makeCoffee() = state.makeCoffee()
    fun turnOff() = state.turnOff()

    override fun toString(): String {
        return &quot;&quot;&quot;COFFEE MACHINE → ${state::class.simpleName}
        |   water quantity : $waterQuantity
        |   beans quantity : $beansQuantity
        |&quot;&quot;&quot;.trimMargin()
    }
}

abstract class CoffeeMachineState(val coffeeMachine: CoffeeMachine) {
    open fun makeCoffee(): Unit = throw UnsupportedOperationException(&quot;Operation not supported&quot;)
    open fun fillInBeans(quantity: Int): Unit = throw UnsupportedOperationException(&quot;Operation not supported&quot;)
    open fun fillInWater(quantity: Int): Unit = throw UnsupportedOperationException(&quot;Operation not supported&quot;)
    open fun turnOn(): Unit = throw UnsupportedOperationException(&quot;Operation not supported&quot;)
    fun turnOff() {
        coffeeMachine.state = coffeeMachine.offState
    }
}

class Off(coffeeMachine: CoffeeMachine) : CoffeeMachineState(coffeeMachine) {
    override fun turnOn() {
        coffeeMachine.state = coffeeMachine.noIngredients
        println(&quot;Coffee machine turned on&quot;)
    }
}

class NoIngredients(coffeeMachine: CoffeeMachine) : CoffeeMachineState(coffeeMachine) {
    override fun fillInBeans(quantity: Int) {
        if ((coffeeMachine.beansQuantity + quantity) &lt;= coffeeMachine.MAX_BEANS_QUANTITY) {
            coffeeMachine.beansQuantity += quantity
            println(&quot;Beans filled in&quot;)
            if (coffeeMachine.waterQuantity &gt; 0) {
                coffeeMachine.state = coffeeMachine.ready
            }
        }
    }

    override fun fillInWater(quantity: Int) {
        if ((coffeeMachine.waterQuantity + quantity) &lt;= coffeeMachine.MAX_WATER_QUANTITY) {
            coffeeMachine.waterQuantity += quantity
            println(&quot;Water filled in&quot;)
            if (coffeeMachine.beansQuantity &gt; 0) {
                coffeeMachine.state = coffeeMachine.ready
            }
        }
    }
}

class Ready(coffeeMachine: CoffeeMachine) : CoffeeMachineState(coffeeMachine) {
    override fun makeCoffee() {
        coffeeMachine.beansQuantity--
        coffeeMachine.waterQuantity--
        println(&quot;Making coffee ... DONE&quot;)
        if (coffeeMachine.beansQuantity == 0 || coffeeMachine.waterQuantity == 0) {
            coffeeMachine.state = coffeeMachine.noIngredients
        }
    }
}

fun main(args: Array&lt;String&gt;) {
    val coffeeMachine = CoffeeMachine()
    coffeeMachine.turnOn()
    println(coffeeMachine)
    coffeeMachine.fillInBeans(2)
    println(coffeeMachine)
    coffeeMachine.fillInWater(2)
    println(coffeeMachine)
    coffeeMachine.makeCoffee()
    println(coffeeMachine)
    coffeeMachine.makeCoffee()
    println(coffeeMachine)
    coffeeMachine.turnOff()
    println(coffeeMachine)
}

</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Decorator pattern in kotlin</title>
            <link>https://dodalovic.github.io/posts/2017/07/decorator-pattern-in-kotlin/</link>
            <pubDate>Sun, 23 Jul 2017 13:35:00 +0100</pubDate>
            
            <guid>https://dodalovic.github.io/posts/2017/07/decorator-pattern-in-kotlin/</guid>
            <description>If you feel curious how would an implementation of decorator design pattern look like in Kotlin, this might be the right place for you. This example is just a very basic thing that you then tweak until it’s perfect. Pattern definition can be found at Wiki, but what’s important is that you can compose chain of decorators at runtime and in such a way – you can control runtime behavior of your system.</description>
            <content type="html"><![CDATA[<p>If you feel curious how would an implementation of decorator design pattern look like in <a href="https://kotlinlang.org/" target="_blank">Kotlin</a>,
this might be the right place for you. This example is just a very basic thing that you then tweak until
it’s perfect. Pattern definition can be found at <a href="https://en.wikipedia.org/wiki/Decorator_pattern" target="_blank">Wiki</a>, but what’s
 important is that you can compose chain of decorators at runtime and in such a way – you can control runtime
 behavior of your system.</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">package</span> patterns

<span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">CarService</span> {
    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">doService</span>()
}

<span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">CarServiceDecorator</span> : CarService

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BasicCarService</span> : CarService {
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">doService</span>() = println(<span style="color:#e6db74">&#34;Doing basic checkup ... DONE&#34;</span>)
}

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CarWash</span>(<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> carService: CarService) : CarServiceDecorator {
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">doService</span>() {
        carService.doService()
        println(<span style="color:#e6db74">&#34;Washing car ... DONE&#34;</span>)
    }
}

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">InsideCarCleanup</span>(<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> carService: CarService) : CarServiceDecorator {
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">doService</span>() {
        carService.doService()
        println(<span style="color:#e6db74">&#34;Cleaning car inside ... DONE&#34;</span>)
    }
}

<span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">main</span>(args: Array&lt;String&gt;) {
    <span style="color:#66d9ef">val</span> carService = InsideCarCleanup(CarWash(BasicCarService()))
    carService.doService()
}</code></pre></td></tr></table>
</div>
</div>

<p>Program output:</p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Doing basic checkup ... DONE
Washing car ... DONE
Cleaning car inside ... DONE</code></pre></div>
]]></content>
        </item>
        
        <item>
            <title>Constructors in kotlin</title>
            <link>https://dodalovic.github.io/posts/2017/06/constructors-in-kotlin/</link>
            <pubDate>Sun, 25 Jun 2017 13:35:00 +0100</pubDate>
            
            <guid>https://dodalovic.github.io/posts/2017/06/constructors-in-kotlin/</guid>
            <description>Constructors in general Constructors are regular functions that give a chance to developer to initialise state of class instance. They are completely optional, and it&amp;rsquo;s perfectly valid to have this, although not so useful 😃:
1  class Person   Constructors in Kotlin behave very similar to the ones we have in Java. We have two types of constructors in Kotlin:
 Primary Secondary  Primary constructors Primary constructors give us a chance to initialise state of our instance with very clean syntax.</description>
            <content type="html"><![CDATA[

<h1 id="constructors-in-general">Constructors in general</h1>

<p>Constructors are regular functions that give a chance to developer to initialise state of class instance.
They are completely optional, and it&rsquo;s perfectly valid to have this, although not so useful 😃:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span></code></pre></td></tr></table>
</div>
</div>

<p>Constructors in <code>Kotlin</code> behave very similar to the ones we have in <code>Java</code>. We have two types of
constructors in <code>Kotlin</code>:</p>

<ul>
<li>Primary</li>
<li>Secondary</li>
</ul>

<h1 id="primary-constructors">Primary constructors</h1>

<p>Primary constructors give us a chance to initialise state of our instance with very clean syntax.
An example of the class having primary constructor would be:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonWithPrimaryConstructorOnly</span>(<span style="color:#66d9ef">val</span> name: String, <span style="color:#66d9ef">val</span> age: Int) {
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">toString</span>() = <span style="color:#e6db74">&#34;{name : &#39;$name&#39;, age: $age}&#34;</span>
}</code></pre></td></tr></table>
</div>
</div>

<p>Primary constructor sits right next to the class name itself. Having <code>val</code> or <code>var</code> next to primary
constructor parameters basically transforms passed arguments to class properties. Similar, but more
verbose, and less preferred way to accomplish the same, would look like:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonWithPrimaryConstructorVerbose1</span>(name: String, age: Int) {
    <span style="color:#66d9ef">var</span> name: String = name
    <span style="color:#66d9ef">var</span> age: Int = age
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">toString</span>() = <span style="color:#e6db74">&#34;{name : &#39;$name&#39;, age: $age}&#34;</span>
}</code></pre></td></tr></table>
</div>
</div>

<p>or:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonWithPrimaryConstructorVerbose2</span>(name: String, age: Int) {
    <span style="color:#66d9ef">var</span> name: String
    <span style="color:#66d9ef">var</span> age: Int

    init {
        <span style="color:#66d9ef">this</span>.name = name
        <span style="color:#66d9ef">this</span>.age = age
    }
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">toString</span>() = <span style="color:#e6db74">&#34;{name : &#39;$name&#39;, age: $age}&#34;</span>
}</code></pre></td></tr></table>
</div>
</div>

<p>In this case, primary constructor doesn&rsquo;t define it&rsquo;s parameters as <code>val</code> or <code>var</code>, but rather we
do the mapping of passed argument to properties explicitly. We should definitely prefer the first option
where the compiler generates this mappings for us.</p>

<h2 id="constructor-visibility">Constructor visibility</h2>

<p>Visibility in <code>Kotlin</code> is <code>public</code> by default, which applies to the constructors as well. In case we want to change
it to, let&rsquo;s say, <code>private</code> we can do it like this:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonWithPrimaryConstructorOnly</span> <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">constructor</span>(<span style="color:#66d9ef">val</span> name: String, <span style="color:#66d9ef">val</span> age: Int) {
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">toString</span>() = <span style="color:#e6db74">&#34;{name : &#39;$name&#39;, age: $age}&#34;</span>
}</code></pre></td></tr></table>
</div>
</div>

<h1 id="secondary-constructors">Secondary constructors</h1>

<p>Secondary constructors are any constructors defined that are not defined as primary constructors. An example
would be:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonWithOnlySecondaryConstructor</span> {
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> name: String
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> age: Int

    <span style="color:#66d9ef">constructor</span>(name: String) {
        <span style="color:#66d9ef">this</span>.name = name
        <span style="color:#66d9ef">this</span>.age = <span style="color:#ae81ff">0</span>
    }

    <span style="color:#66d9ef">constructor</span>(name: String, age: Int) : <span style="color:#66d9ef">this</span>(name) {
        <span style="color:#66d9ef">this</span>.age = age
    }

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">toString</span>() = <span style="color:#e6db74">&#34;{name: &#39;$name&#39;, age: $age}&#34;</span>
}</code></pre></td></tr></table>
</div>
</div>

<p>We&rsquo;ve got two constructors here. The first one, with only one, <code>name</code> parameter, just sets the name and initiates <code>age</code> to <code>0</code>.
The second one, with additional <code>age</code> argument calls the first one with:</p>

<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin">: <span style="color:#66d9ef">this</span>(name)</code></pre></td></tr></table>
</div>
</div>

<p>and additionally sets age property explicitly.</p>
]]></content>
        </item>
        
    </channel>
</rss>
